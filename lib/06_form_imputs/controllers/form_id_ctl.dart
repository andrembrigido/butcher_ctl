/// üß† O que faz:
/// Classe que controla a gera√ß√£o de IDs √∫nicos para os itens do formul√°rio.
///
/// üìå Para que serve:
/// Cria um ID visual tempor√°rio (quando o usu√°rio clica em "Adicionar outro item")
/// e gera um ID oficial somente ao confirmar com o bot√£o de check.
///
/// üçΩÔ∏è Analogia:
/// Pense como uma comanda de restaurante: o gar√ßom escreve a pr√©via no papel (visual),
/// mas s√≥ passa para a cozinha (confirma) quando o pedido √© finalizado.
///
/// üß± Onde se encaixa:
/// Usado dentro do bot√£o visual `FormIdBtn`, que √© parte do formul√°rio `FormAdd`.
class FormIdCls {
  //Contador interno que simula a quantidade de carnes adicionadas
  int _itemCounter = 0;

  // Getter para acessar o valor atual do contador
  int get currentCount => _itemCounter;

  //Gera um ID visual (apenas para exibi√ß√£o) sem salvar no sistema
  String gerarIdVisual() {
    final numeroVisual = (_itemCounter + 1).toString().padLeft(5, '0');

    final agora = DateTime.now();
    final dia = agora.day.toString().padLeft(2, '0');
    final mes = agora.month.toString().padLeft(2, '0');
    final ano = agora.year.toString();

    final idVisual = '#$numeroVisual$dia$mes$ano';
    return idVisual;
  }

  //Gera e confirma o ID oficial, salvando ao clicar no bot√£o de check
  String confirmarESalvarId() {
    _itemCounter++;

    final numeroOficial = _itemCounter.toString().padLeft(5, '0');

    final agora = DateTime.now();
    final dia = agora.day.toString().padLeft(2, '0');
    final mes = agora.month.toString().padLeft(2, '0');
    final ano = agora.year.toString();

    final idFinal = '#$numeroOficial$dia$mes$ano';
    return idFinal;
  }
}
